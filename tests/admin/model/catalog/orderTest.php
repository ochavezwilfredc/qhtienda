<?php

use PHPUnit\Framework\TestCase;

require __DIR__ . "/../../../../api/admin/model/sale/order.php";

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-11-03 at 04:36:17.
 */
class ModelSaleOrderTest extends TestCase {

    /**
     * @var ModelSaleOrder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ModelSaleOrder;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers ModelSaleOrder::getOrder
     * @todo   Implement testGetOrder().
     */
    public function testGetOrder() {
        // Remove the following lines when you implement this test.
        $order_id = 1;
        $order = $this->object->getOrder($order_id);
        $this->assertNotNull($order);
    }

    /**
     * @covers ModelSaleOrder::getTotalOrders
     * @todo   Implement testGetTotalOrders().
     */
    public function testGetTotalOrders() {
        // Remove the following lines when you implement this test.
        $data = [
            "filter_order_status" => true,
            "filter_order_id" => null,
            "filter_customer" => 1,
            "filter_date_added" => "2016-09-12 08:00:00",
            "filter_date_modified" => "2017-10-29 10:00:00",
            "filter_total" => null
        ];
        $totalOrders = $this->object->getTotalOrders($data);
        $this->AssertGreaterThan(0, count($totalOrders));
    }

    /**
     * @covers ModelSaleOrder::createInvoiceNo
     * @todo   Implement testCreateInvoiceNo().
     */
    public function testCreateInvoiceNo() {
        // Remove the following lines when you implement this test.
        $order_id = 1;
        $order = $this->object->getOrder($order_id);
        $orderUpdate = $this->object->createInvoiceNo($order_id);
        $this->assertNotEquals($order, $orderUpdate);
    }

}
